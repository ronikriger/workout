version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: repright-postgres
    environment:
      POSTGRES_DB: repright
      POSTGRES_USER: repright_user
      POSTGRES_PASSWORD: repright_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - repright-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U repright_user -d repright"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery task queue
  redis:
    image: redis:7-alpine
    container_name: repright-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - repright-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  # FastAPI Backend
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: repright-backend
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://repright_user:repright_password@postgres:5432/repright
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: your-secret-key-change-in-production
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7
      ENVIRONMENT: development
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    volumes:
      - ../backend:/app
      - video_uploads:/app/uploads
    networks:
      - repright-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Celery Worker for background video processing
  celery-worker:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: repright-celery-worker
    command: celery -A app.core.celery worker --loglevel=info --concurrency=2
    environment:
      DATABASE_URL: postgresql://repright_user:repright_password@postgres:5432/repright
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      SECRET_KEY: your-secret-key-change-in-production
    volumes:
      - ../backend:/app
      - video_uploads:/app/uploads
    networks:
      - repright-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: repright-celery-beat
    command: celery -A app.core.celery beat --loglevel=info
    environment:
      DATABASE_URL: postgresql://repright_user:repright_password@postgres:5432/repright
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      SECRET_KEY: your-secret-key-change-in-production
    volumes:
      - ../backend:/app
    networks:
      - repright-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Flower for monitoring Celery tasks
  flower:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: repright-flower
    command: celery -A app.core.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    networks:
      - repright-network
    depends_on:
      - redis
    restart: unless-stopped

  # Nginx reverse proxy (optional for production)
  nginx:
    image: nginx:alpine
    container_name: repright-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - repright-network
    depends_on:
      - backend
    restart: unless-stopped
    profiles:
      - production

  # MinIO for S3-compatible object storage (development)
  minio:
    image: minio/minio:latest
    container_name: repright-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    networks:
      - repright-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    profiles:
      - development

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: repright-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - repright-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: repright-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - repright-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  video_uploads:
    driver: local
  minio_data:
    driver: local
  grafana_data:
    driver: local

networks:
  repright-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 
name: RepRight CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # Backend Testing and Linting
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: repright_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1
        
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Ruff linting
      working-directory: ./backend
      run: ruff check . --output-format=github

    - name: Run Ruff formatting check
      working-directory: ./backend
      run: ruff format --check .

    - name: Run MyPy type checking
      working-directory: ./backend
      run: mypy app/ --ignore-missing-imports

    - name: Run database migrations
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/repright_test
      run: alembic upgrade head

    - name: Run pytest with coverage
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/repright_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        ENVIRONMENT: testing
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html --cov-fail-under=85

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Mobile App Testing and Linting
  mobile-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json

    - name: Install dependencies
      working-directory: ./mobile
      run: npm ci

    - name: Run ESLint
      working-directory: ./mobile
      run: npm run lint

    - name: Run TypeScript type checking
      working-directory: ./mobile
      run: npm run type-check

    - name: Run Jest tests
      working-directory: ./mobile
      run: npm test -- --coverage --watchAll=false

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./mobile/coverage/lcov.info
        flags: mobile
        name: mobile-coverage

  # Mobile E2E Testing
  mobile-e2e:
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json

    - name: Install dependencies
      working-directory: ./mobile
      run: npm ci

    - name: Setup iOS Simulator
      run: |
        xcrun simctl list
        xcrun simctl boot "iPhone 15" || true

    - name: Build iOS app for testing
      working-directory: ./mobile
      run: |
        npx expo install --fix
        npm run test:e2e:build

    - name: Run Detox E2E tests
      working-directory: ./mobile
      run: npm run test:e2e

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit security scan (Python)
      working-directory: ./backend
      run: |
        pip install bandit
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Run npm audit (Node.js)
      working-directory: ./mobile
      run: |
        npm audit --audit-level moderate --output json > npm-audit.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          mobile/npm-audit.json

  # Build Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: [backend-test]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/repright-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/repright-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Fly.io
  deploy:
    runs-on: ubuntu-latest
    needs: [backend-test, mobile-test, build-images]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Fly CLI
      uses: superfly/flyctl-actions/setup-flyctl@master

    - name: Deploy backend to Fly.io
      working-directory: ./backend
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      run: |
        flyctl deploy --remote-only

    - name: Run database migrations on Fly.io
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      run: |
        flyctl ssh console -a repright-backend -C "alembic upgrade head"

    - name: Health check deployment
      run: |
        sleep 30
        curl -f https://repright-backend.fly.dev/health || exit 1

  # Mobile App Build (for releases)
  mobile-build:
    runs-on: ubuntu-latest
    needs: [mobile-test]
    if: github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json

    - name: Install dependencies
      working-directory: ./mobile
      run: npm ci

    - name: Setup Expo CLI
      run: npm install -g @expo/cli

    - name: Build for Android
      working-directory: ./mobile
      run: |
        npx expo build:android --type apk --release-channel production

    - name: Build for iOS
      working-directory: ./mobile
      run: |
        npx expo build:ios --type archive --release-channel production

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: mobile-builds
        path: |
          mobile/build/

  # Notify on deployment
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
    - name: Notify Slack on success
      if: needs.deploy.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        fields: repo,commit,author,ref
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: 'üöÄ RepRight deployed successfully!'

    - name: Notify Slack on failure
      if: needs.deploy.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        fields: repo,commit,author,ref
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: '‚ùå RepRight deployment failed!'

# Workflow cleanup
  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: [backend-test, mobile-test, security-scan, build-images, deploy]

    steps:
    - name: Clean up old artifacts
      run: echo "Cleaning up workflow artifacts..." 